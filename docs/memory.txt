TinyOS Memory Management
========================

Initially during the bootstrap and initial kernel stages, the kernel configures
the MMU with two memory mappings, an Identity mapping (V=P), and a Kernel Virtual
Address (KVA) mapping. The need for the Identity mapping is so the instructions
following the enablement of the MMU can continue executing, and before the kernel
enters `kernel_init` the Link Register is configured with the correct KVA 
(0xfff...).

These initial bootstrap mappings will be used until just before the kernel tasking
system is initialised. The proper mappings for the kernel will be configured at
this stage.

Some initial declarations to make:
    - We use a 40-bit physical address size.
    - Translation Granule size of 4KB.


Translation Tables
------------------

The VMSAv8-64 (Virtual Memory System Architecture) defines the structure and
operation of the virtual memory system on AArch64 ARMv8-A platforms. The system
comprises of four levels of translation tables and two stages. The second stage
of translation is only applicable to systems with a Hypervisor which, for now,
is not relevant to us.

Therefore, we only have Stage 1 translation. The MMU can be configured to use up
to four levels of translation, with tables indexed from 0 to 3. In the case of
the actual Kernel translation tables we will use all four levels, but for the
intiial bootstrap mappings we only use two. The initial level of translation
can also be configured by programming the TCR_EL1 system register.

Additionally, at EL1 and EL0, the virtual memory space is split into "high" and
"low" memory, with the boundary determined by TCR_EL1.T0SZ. They should each have
their own translation tables, with the base address of the low region written to
TTBR0_EL1, and the base address of the high region written to TTBR1_EL1.

The size of the translation tables is dependent on the Granule size. In our case,
using a 4KB granule size, the translation tables have a maximum of 512 entries,
where entries are 8-bytes each. There are three types of entries, called 
descriptors: Table, Page and Block.

Table descriptors point to the next translation table and can be used in levels
0, 1 and 2. Page descriptors point to a memory area that matches the granule
size, i.e. 4KB and can only be used at level 3. Finally, Block descriptors point
to a much larger "block" of memory and can only be used at levels 1 and 2.

A block descriptor at Level 1 can point to a 1GB region, whereas a Level 2 block
descriptor points to a 2MB region.

As for the encoding of these descriptors, ...




Initial Bootstrap Mappings
--------------------------

The Kernel creates two initial memory mappings very early on in the boot process
in the Reset Vector. The first one directly maps physical memory into virtual
memory (V=P), and the second maps physical memory to the Kernel Virtual Address
base (KVA).

These two mappings allow for the MMU to be enabled and for the kernel to initally
run in the low memory region until we can calculate the proper high memory address
for the kernel_init function. 

These two initial mappings use just two levels of translation, Level 1 and Level
2. This initial lookup level is controlled by the TCR_EL1.TnSZ field, where `n`
denotes the low (0) or high (1) region. A TnSZ value between:
    - 16 and 24: initial level 0
    - 25 and 33: initial level 1
    - 34 and 39: intiial level 2

The memory size, and physical/virtual base addresses are determined by tBoot and
are passed to the reset vector. As tBoot is more platform-specific, it is more
appropriate for it to determine the system physical base address.

<detail calcualtion of virtual address base>